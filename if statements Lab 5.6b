{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Lab 56b.ipynb","provenance":[{"file_id":"1k7QEoFRZXrWf7XG7l4G2v6r-kge0jG5r","timestamp":1637334559286},{"file_id":"1BpwiiiI_n0zwyEz1dKeJ58PTxYmHGi14","timestamp":1619124662652},{"file_id":"19FPF8p4Z5GjqWMZ1owustfT-dhm7F10j","timestamp":1573155615796},{"file_id":"1y3I-A6cEi1RXKVv1QXxvHz99xGjVeBSM","timestamp":1572553431127},{"file_id":"1lbqzDauSbUOcfPFgT8AgnPTnrirBenmY","timestamp":1571995149955},{"file_id":"1LR-3zQl_enteF5VT31NEdFX-AlcsCdJQ","timestamp":1571380487289},{"file_id":"1ZWoKeKHl7wthzrrK8Dam2ccE5Ci7zKtC","timestamp":1569535579712},{"file_id":"1zgf0RnmZph9ojxgnD9HhNe0fgNnY-kQp","timestamp":1568758223205},{"file_id":"1Ye2wU70lVeNZ9IzUScokFvczh_4r91Ns","timestamp":1568386546423}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"bHi2H286paFN"},"source":["# Lab 5.6b\n","\n","Goals:\n"," \n","* Use `if` statements to control the flow of a program\n","* Import and manipulate data from a CSV file\n","* Compute the squared error of a linear approximation\n","* Use `sympy` to calculate the line of best fit\n","\n"]},{"cell_type":"markdown","metadata":{"id":"WEEEmHOILj7_"},"source":["Here are your libraries.\n"]},{"cell_type":"code","metadata":{"id":"mZZqUPjspZGa"},"source":["import numpy as np\n","import urllib.request as request\n","import matplotlib.pyplot as plt\n","import csv\n","import codecs\n","import sympy"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iZ7nrjlaWsmh"},"source":["Here is the world development indicators data from 2018, compiled by the world bank."]},{"cell_type":"code","metadata":{"id":"JIssaNqyWz_E"},"source":["# get a file from a website\n","wdi=request.urlopen('https://math.emory.edu/~mpcarr/math210/labs/data/wdi.csv')\n","# read that file as a csv file\n","csvfile = csv.reader(codecs.iterdecode(wdi, 'utf-8'))\n","# save the data in the csv file as a python list\n","csv=list(csvfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ySdqG_cOW1ck"},"source":["Here is the test function `isNumeric()` that you used in the prelab."]},{"cell_type":"code","metadata":{"id":"kWrISSrNW1GM"},"source":["def isNumeric(s):\n","   try:\n","      s = float(s)\n","      return True\n","   except:\n","      return False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"42PbwtsuZjPR"},"source":["In the Prelab, we used only the first two columns of the WDI data.  There are more columns though, and we can read their headers from the first row."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xiX2AAOZZimx","executionInfo":{"status":"ok","timestamp":1637514517361,"user_tz":300,"elapsed":5,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"c920180f-e7b3-4004-94e2-0c24ddd09a03"},"source":["csv[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Country Name',\n"," 'Country Code',\n"," 'Adjusted net national income per capita (current US$) [NY.ADJ.NNTY.PC.CD]',\n"," 'Adolescent fertility rate (births per 1,000 women ages 15-19) [SP.ADO.TFRT]',\n"," 'Adolescents out of school (% of lower secondary school age) [SE.SEC.UNER.LO.ZS]',\n"," 'Birth rate, crude (per 1,000 people) [SP.DYN.CBRT.IN]',\n"," 'Children out of school, primary [SE.PRM.UNER]',\n"," 'Fertility rate, total (births per woman) [SP.DYN.TFRT.IN]',\n"," 'Income share held by highest 20% [SI.DST.05TH.20]',\n"," 'Labor force participation rate, female (% of female population ages 15+) (national estimate) [SL.TLF.CACT.FE.NE.ZS]',\n"," 'Labor force participation rate, total (% of total population ages 15+) (national estimate) [SL.TLF.CACT.NE.ZS]',\n"," 'Life expectancy at birth, total (years) [SP.DYN.LE00.IN]',\n"," 'Literacy rate, adult total (% of people ages 15 and above) [SE.ADT.LITR.ZS]',\n"," 'Mobile cellular subscriptions (per 100 people) [IT.CEL.SETS.P2]',\n"," 'Oil rents (% of GDP) [NY.GDP.PETR.RT.ZS]',\n"," 'Prevalence of undernourishment (% of population) [SN.ITK.DEFC.ZS]',\n"," 'Prevalence of severe food insecurity in the population (%) [SN.ITK.SVFI.ZS]',\n"," 'Rural population (% of total population) [SP.RUR.TOTL.ZS]']"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"WVsGlmYkAfLR"},"source":["# Questions\n","Write answers to these questions using code and text blocks.  When you are satisfied, download and submit an .ipynb file to Gradescope."]},{"cell_type":"markdown","metadata":{"id":"OHo160_t0zfx"},"source":["## Q1\n","Pick two columns from the WDI data that sound interesting to you and that you would like to compare.  Pick a different pair than anyone else in your group.\n","1. Create a pair of matching lists with the data from those columns.  Make sure\n"," * Your list contains numbers, not strings\n"," * Your list contains entries only for countries that had data for each column.\n","2. Make a plot of your data.  Your plot should have a title and labelled axes (with units)."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XCjuoDGLvxU1","executionInfo":{"status":"ok","timestamp":1637514520062,"user_tz":300,"elapsed":236,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"cd67307d-1b69-4678-b7d8-e1239a4fb59e"},"source":["food_insecurity=[]\n","undernourishment=[]\n","\n","for column in csv: \n","  def isfloat(column):\n","    try:\n","      column[15] = float(column[15])\n","      column[16] = float(column[16])\n","      return True\n","    except:\n","      return False \n","  if isfloat(column) == True:\n","    food_insecurity.append(float(column[15]))\n","    undernourishment.append(float(column[16]))\n","\n","print(food_insecurity)\n","print(undernourishment)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[29.9, 3.6, 2.8, 3.8, 2.6, 2.5, 2.5, 2.5, 13.0, 2.5, 2.5, 24.1, 2.5, 3.0, 19.2, 14.5, 3.5, 3.2, 2.5, 2.5, 2.5, 4.7, 8.9, 2.5, 16.9, 19.7, 2.5, 2.5, 11.9, 8.2, 2.5, 6.5, 2.5, 16.1, 13.8, 2.5, 2.5, 9.0, 4.7, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 37.5, 2.5, 2.5, 18.8, 3.0, 2.5, 11.9, 5.3, 7.1, 21.3, 2.5, 32.6, 14.7, 6.1, 2.5, 2.5, 12.6, 3.1, 2.5, 14.5, 2.5, 2.5, 2.5, 2.5, 9.4, 4.6, 26.0, 6.1, 2.5, 5.7, 2.5, 12.4, 2.5, 2.5, 2.5, 3.5, 2.5, 2.5, 2.5, 2.6]\n","[22.7, 10.0, 9.3, 12.9, 4.1, 3.9, 1.1, 0.0, 10.6, 3.6, 1.5, 41.2, 1.6, 1.9, 13.9, 13.6, 3.8, 5.4, 0.9, 0.0, 1.1, 7.8, 14.6, 0.9, 30.0, 14.1, 2.0, 0.7, 24.6, 7.3, 0.7, 8.4, 2.3, 18.1, 23.9, 0.8, 1.5, 0.8, 8.3, 3.5, 1.6, 1.1, 0.7, 0.0, 4.9, 0.6, 60.4, 1.1, 0.9, 51.8, 6.7, 0.8, 22.4, 6.7, 11.5, 5.9, 2.2, 40.7, 31.3, 10.3, 1.7, 4.5, 9.1, 3.2, 1.1, 17.6, 0.0, 2.9, 3.4, 0.8, 16.7, 2.0, 31.8, 0.8, 0.0, 0.0, 1.8, 16.4, 1.2, 0.7, 9.1, 1.6, 1.3, 0.8, 6.4, 2.8]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"oc_nEPyuyfOV","executionInfo":{"status":"ok","timestamp":1637514836602,"user_tz":300,"elapsed":605,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"7c43d012-0c0f-421d-91fa-8c59350df93a"},"source":["ax=plt.axes()\n","ax.set_title('Food insecurity vs Undernourishment')\n","ax.set_xlabel('Prevalence of Food Insecurity (% population)')\n","ax.set_ylabel('Prevalence of Undernourishment (% population)')\n","ax.plot(food_insecurity,undernourishment, 'o')"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fe2607d8810>]"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"6gvhAaIzbgjR"},"source":["## Q2\n","\n","Write and run code blocks that\n","1. Define symbolic variables `m` and `b`\n","2. Copy your `sqerror()` function from the prelab.\n","3. Run the `sqerror()` function with your data from Q1 with coefficients `m` and `b`.  Save the result to `err`.\n","4. Compute `err_m` and `err_b` the partial derivatives of `err`.\n","5. Use `sympy.solvers.linsolve()` to find the `m` and `b` of the line of best fit.\n","6. Make a plot of your data again, but this time include the line of best fit.\n","\n"]},{"cell_type":"code","metadata":{"id":"1UNeFc4Qzofq","executionInfo":{"status":"ok","timestamp":1637514731341,"user_tz":300,"elapsed":220,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}}},"source":["def sqerror(xvalues,yvalues,slope,intercept):\n","  total=0\n","  for i in range(len(food_insecurity)): \n","    x=food_insecurity[i]\n","    y=undernourishment[i]\n","    error=slope*x+intercept-y\n","    total=total+error**2\n","  return total\n","  print(total)\n"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"mXuVRyNdzKRD","executionInfo":{"status":"ok","timestamp":1637514735633,"user_tz":300,"elapsed":2628,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}}},"source":["m=sympy.Symbol('m')\n","b=sympy.Symbol('b')\n","\n","err = sqerror(food_insecurity,undernourishment,m,b)\n","err_m=sympy.diff(err,m)\n","err_b=sympy.diff(err,b)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":37},"id":"_ngbobhu0mvT","executionInfo":{"status":"ok","timestamp":1637514735634,"user_tz":300,"elapsed":14,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"9c36375a-bb50-46d5-f5c1-ced9d482cded"},"source":["sympy.solvers.linsolve([err_m,err_b],(m,b))"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/latex":"$\\displaystyle \\left\\{\\left( 1.33336764885451, \\  -0.897529185049212\\right)\\right\\}$","text/plain":["FiniteSet((1.33336764885451, -0.897529185049212))"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"36eWoWzr0gTF","executionInfo":{"status":"ok","timestamp":1637516081373,"user_tz":300,"elapsed":503,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"aa9585cd-e58b-4656-dd94-b8f8bee7306d"},"source":["x=np.arange(0,35)\n","\n","def l(x):\n","  return 1.33336764885451*x-0.897529185049212\n","\n","ax=plt.axes()\n","ax.set_title('Food Insecurity vs Undernourishment')\n","ax.set_xlabel('Prevalence of Food Insecurity (% population)')\n","ax.set_ylabel('Prevalence of Undernourishment (% population)')\n","ax.plot(food_insecurity,undernourishment, 'o')\n","ax.plot(x,l(x))"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fe24fb35b50>]"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"LHm2FPpGcQ1N"},"source":["## Q3\n","Some data fits a linear model better than others. Since we already have an error function available, we can see how well the best line fits the data.\n","\n","1. Take the `m` and `b` values of best fit that you solved for in Q2.  Compute the `sqerror()` for those values.\n","2. Compare to one or more of your groupmates.  Can you infer from your squared error whose data fits a line better?  What differences would you need to correct for in order to get a meaningful comparison?  Refer to specific differences between your datasets."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vy3zk2ZJ1zWj","executionInfo":{"status":"ok","timestamp":1637516084545,"user_tz":300,"elapsed":215,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"7840fd0a-c7e0-422e-9a92-774a2f2eda93"},"source":["m= 1.33336764885451\n","b=-0.897529185049212\n","sqerror(food_insecurity,undernourishment,m,b)"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3119.8826943555964"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"rrc9eil03ZB6"},"source":["When I compared food insecurity and undernourishment, my sum of squared errors was 3119.88. Looking at Ellen, she compared rural population and food insecurity. Her sum of squared errors is 11897.43. At first, this suggests that my sqerror is smaller, meaning that my data and line fits better. However, becuae Ellen's range differs from mine, with her data points being from 0 to 100 and my data points being from 0 to 35 it is misleading to assume that my line fits my data better. Because of Ellen's bigger range, there will be more space between her data points and her sqerror will be bigger. In order to objectively say which line fits better, we must look at the x-axis and make it so that we have the same range. This way, we will be able to compare and say which squared error line fits better, or the average distance of a data point from the line of best fit. Jessica has similar range to me (hers is from 30 to 60) and she got a sqerror of 1251.5. We can effectively infer that there may be a higher correlation between her comparison, children out of school vs literacy rate, and my comparison, food insecurity and undernourishment. Her data fits better. "]},{"cell_type":"markdown","metadata":{"id":"eWk3Ymf_sX7B"},"source":["## Afterword:\n","\n","Of course, mathematicians figured out how to do this years ago. There are some slick algebra shortcuts that you'll learn in later statistics courses.  There are also pre-written algorithms for all of this.  Try this one, for instance. Check that it gives the same slope and intercept that you found.\n"]},{"cell_type":"code","metadata":{"id":"sLl4dx_PymqA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637515269524,"user_tz":300,"elapsed":873,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"3dd20962-d17b-4621-a438-ebc8a2902e79"},"source":["from sklearn.linear_model import LinearRegression\n","\n","xvalues=food_insecurity #<- your first data list here\n","yvalues= undernourishment#<- your second data list here\n","\n","# refit the x data to be a column instead of a row\n","x=np.array(xvalues).reshape((len(xvalues),1))\n","y=np.array(yvalues)\n","\n","# create a linear regression object and fit it to x,y\n","model=LinearRegression().fit(x,y)\n","\n","# print the coef and intercept methods from the object\n","print(f'slope={model.coef_}')\n","print(f'intercept={model.intercept_}')"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["slope=[1.33336765]\n","intercept=-0.8975291850492084\n"]}]}]}