{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Lab 24.ipynb","provenance":[{"file_id":"1kI40eTGe9Jet0c_Qd4wNuYFBucmKcHl6","timestamp":1631282579100},{"file_id":"1f7NGC2FlgsHIYKQJUVIjNcfFz2_AEqIc","timestamp":1613098226424}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"H9uexyJcv5Ym"},"source":["# Lab 2.4\n","\n","Goals:\n","* Use arrays to compute approximations of integrals.\n","* Use graphs and formulas to bound the error of these approximations.\n","* Understand how the actual error is related to the error bound, and how the shape of the function affects that relationship.\n","* Use flow-control and the rectangle method to visualize integral approximations."]},{"cell_type":"markdown","metadata":{"id":"RUD-70U3GRpT"},"source":["### Instructions\n","* With your group, work through each of the questions below.  Most questions include some discussion and some bullet-pointed instructions.  Make sure you carry out the bullet-pointed instructions, because that it what is graded.  \n","* You are expected to collaborate with your group.  You should arrive at the answers to these questions together.  However, your submitted answers should be expressed in your own words.\n","* If you need to pause, you can save and come back to your work later.  \n","* When you are done, select \"download .ipynb\" from the file menu.  Save the ipynb to your computer, then upload it to the Lab assignment in gradescope.\n"]},{"cell_type":"markdown","metadata":{"id":"9g3kL9HcwgDU"},"source":["We will begin by importing the libraries we use for graphing."]},{"cell_type":"code","metadata":{"id":"F8wEIdO3wfws"},"source":["import matplotlib.pyplot as plt\n","import matplotlib.patches as patches\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qNOhsOpmxLyH"},"source":["Define five algebraic functions by running this cell.  Each person in your group should pick a different one of these functions.  For the rest of the lab, $f(x)$ refers to the function you picked. "]},{"cell_type":"code","metadata":{"id":"X1tu6QZFv2Hz"},"source":["def f1(x): \n","  return x**3 - 6*x**2 + 14*x - 6 \n","  # actual integral: 108.75\n","\n","def f2(x):\n","  return -x**3 + 6*x**2 - 4*x + 20  \n","  # actual integral: 136.25\n","\n","def f3(x):\n","  return -2*x**3 + 24*x**2 - 80*x + 100 \n","  # actual integral: 172.5\n","\n","def f4(x):\n","  return x**4 - 16*x**3 + 96*x**2 - 264*x +300\n","  # actual integral: 135\n","\n","def f5(x):\n","  return -x**3 + 12*x**2 - 57*x + 130\n","  # actual integral: 188.75"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Kr5nenYR0eJT"},"source":["We'll be computing left-hand approximations of $\\int_1^6 f(x)~dx$ (where $f$ is your function)."]},{"cell_type":"markdown","metadata":{"id":"j-clb4YF0Z0S"},"source":["### Q1\n","\n","* Copy your left-hand approximation code from Exercise 2 of the pre-lab.  \n","* Modify it to use your function, instead of `f()` (or you can redefine `f()` to be your function),\n","* Run your code to produce the $L_{10}$ approximation of the integral of your function from 1 to 6.\n"]},{"cell_type":"code","metadata":{"id":"9sNQ_BfZA9OV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631488352915,"user_tz":240,"elapsed":118,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"af81bb12-7013-4cba-e7d2-f983138100fc"},"source":["import matplotlib.pyplot as plt\n","import matplotlib.patches as patches\n","import numpy as np\n","\n","n=10\n","deltax=(6-1)/n\n","x = np.arange(1,6,deltax)\n","print(x)\n","\n","\n","def f1(x): \n","  return (x**3 - 6*x**2 + 14*x - 6)*deltax\n","\n","\n","leftL10 = f1(x)\n","\n","np.sum(leftL10)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1.  1.5 2.  2.5 3.  3.5 4.  4.5 5.  5.5]\n"]},{"output_type":"execute_result","data":{"text/plain":["90.9375"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"y0Jr9_sx12rS"},"source":["### Q2\n","\n","\n","* Define a function `df(x)` which returns the derivative $f'(x)$ at `x`.\n","* Graph $f(x)$ and $f'(x)$."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":266},"id":"S1HxH9gOBVC_","executionInfo":{"status":"ok","timestamp":1631489847693,"user_tz":240,"elapsed":371,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"8e8bb1b9-65e0-4f56-e680-6ebc6c08b9a0"},"source":["n=10\n","deltax=(6-1)/n\n","x = np.arange(1,6,deltax)\n","def df(x):\n","  return 3*x**2-12*x+14\n","\n","\n","plt.plot(x, f1(x), color = 'red') \n","plt.plot(x, df(x))\n","plt.grid()\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"_RNm8ojL2hdN"},"source":["### Q3\n","\n","* Look at your graph in Q2.  What bound $S$ can you put on $|f'(x)|$ over the interval $[1,6]$.\n","* Use $S$ to compute the theoretical error bound of the $L_{10}$ approximation. Look up the formula if you need it.  Since it's good practice, input the arithmetic for this formula into a code cell and compute it there."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_tgAUP-rCDn-","executionInfo":{"status":"ok","timestamp":1631288459486,"user_tz":240,"elapsed":108,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"ef2ea2a3-2b33-4b7c-f01b-d8fe01f42a7a"},"source":["#df(x)=3*x**2-12*x+14 on [1,6], df(x) is greatest at x=6\n","\n","def df(x):\n","  return 3*x**2-12*x+14\n","print(df(6)) #df(6) = 50, so S=50 \n","S= 50\n","n=10\n","boundL10= (S*(6-1)**2)/(2*n)\n","\n","print('bound for L10:')\n","print(boundL10) \n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["50\n","bound for L10:\n","62.5\n"]}]},{"cell_type":"markdown","metadata":{"id":"c9ytTejn32gC"},"source":["### Q4\n","\n","How does the error bound relate to the actual error?  \n","* Compute $L_{100}$ and $L_{1000}$ approximations of $\\int_1^6 f(x)~dx$.  You can reuse your work from Q1.\n","* The actual value of $\\int_1^6 f(x)~dx$ is in a comment in the code cell that defined the five functions.  Compute the actual error of your $L_{10}$, $L_{100}$ and $L_{1000}$ approximations.\n","* Compute the theoretical error bound of each approximation. \n","* What percentage of the theoretical error bound is each actual error?\n","* How does the number of rectangles appear to affect the percentages you computed?  Compare your data to your group-mates and make a general observation, containing specific references to their data. \n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ILscnS6DHX06","executionInfo":{"status":"ok","timestamp":1631558963364,"user_tz":240,"elapsed":96,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"e7f63596-7e37-4d9c-ae37-cce43e920296"},"source":["import matplotlib.pyplot as plt\n","import matplotlib.patches as patches\n","import numpy as np\n","\n","def theoreticalerrorbound(n):\n","  return (50*(6-1)**2)/(2*n)\n","\n","def Lapproximation(n):\n","  deltax=(6-1)/n\n","  x = np.arange(1,6,deltax)\n","  def f1(x): \n","    return x**3 - 6*x**2 + 14*x - 6\n","  left = f1(x)\n","  sum = np.sum(left)*deltax\n","  return sum\n","\n","def actual(n):\n","  return Lapproximation(n)-108.75\n","\n","def percent(n):\n","  return actual(n) / theoreticalerrorbound(n) * -100\n","\n","print(actual(100)/actual(10))\n","print(\"Theoretical error of L10\")\n","print(theoreticalerrorbound(10))\n","print(\"Actual error of L10\")\n","print(actual(10))\n","print(\"L10 actual/theoretical\")\n","print(percent(10))\n","\n","print(\"----------------------\")\n","\n","print(\"Approximation of L100\")\n","print(Lapproximation(100))\n","print(\"Theoretical error of L100\")\n","print(theoreticalerrorbound(100))\n","print(\"Actual error of L100\")\n","print(actual(100))\n","print(\"L100 actual/theoretical\")\n","print(percent(100))\n","\n","print(\"----------------------\")\n","\n","print(\"Approximation of L1000\")\n","print(Lapproximation(1000))\n","print(\"Theoretical error of L1000\")\n","print(theoreticalerrorbound(1000))\n","print(\"Actual error of L1000\")\n","print(actual(1000))\n","print(\"L1000 actual/theoretical\")\n","print(percent(1000))\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.10473684210524847\n","Theoretical error of L10\n","62.5\n","Actual error of L10\n","-17.8125\n","L10 actual/theoretical\n","28.499999999999996\n","----------------------\n","Approximation of L100\n","106.88437500000026\n","Theoretical error of L100\n","6.25\n","Actual error of L100\n","-1.8656249999997385\n","L100 actual/theoretical\n","29.84999999999582\n","----------------------\n","Approximation of L1000\n","108.56259374999401\n","Theoretical error of L1000\n","0.625\n","Actual error of L1000\n","-0.1874062500059921\n","L1000 actual/theoretical\n","29.985000000958735\n"]}]},{"cell_type":"markdown","metadata":{"id":"xVf04KHhJyrZ"},"source":["As the subintervals increase (or number of rectangles increase), the percentage increases. Comparing my data to others, whether or not the percentage increases or decreases depends on how much the actual error is decreasing. For example, because my actual error decreases by more than .10, the percentage increases. For those whose percentage decreases, their actual error decreases by less than .10.\n","The percentages for f1(x) is .285 (L10), .298 (L100), and .299 (L1000). The percentages for f5(x) at L10, is 45.1 and at L1000 it is .445. For those who have their percentages increase, their actual error decreases by more than .10. For those who have their percentages decrease, their actual error decreases at less than .10. When the ratio of the actual error of L10 to L100 is greater. For the percentages of those who decreases, their actual error is decreasing at a faster rate than the theoretical error bound. "]},{"cell_type":"markdown","metadata":{"id":"JOSltMrY5qpF"},"source":["### Q5\n","\n","Some functions have an actual error $E_L$ that is a relatively large percentage of the theoretical bound.  Others have $E_L$ that is much smaller than the theoretical bound.  This is our main question:  \n","\n","> What properties of a function make the actual error $E_L$ a larger or smaller percentage of the theoretical error bound?\n","\n","* In a text cell, compare your percentages to that of your groupmates, specifically referencing their data.  \n","* Come up with a conjecture about what properties of your graphs cause the actual error to be a larger or smaller percentage of the theoretical error bound.  \n","* For full credit, give a plausible mathematical reason why your conjecture might be true.\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"HEJ1u39gUm-K"},"source":["At L100, the percent for f1(x) = 24.8%, the percent for f2(x) = 12.3%, the percent for f3(x) = 5.13%, the percent for f4(x) = 18.3%, and the percent for f5(x) = 44.5%. \n","The properties of the function that would make the actual error a larger or smaller percentage depends on the curvature of the functions. The greatest percentage of actual error to theoretical error bound is f5(x), this is because the f5(x) graph is a straight line. It seems to be that the less curves the function on the graph has, the greater the percentage is. For f1(x), there is only one tiny curve, so the percentage is still pretty high. The smallest percentage is f3(x), and there are many curves in the function on the graph. This makes sense, because a straighter line (like in f5(x)), there would be less error, and so the percentage of actual error to theoretical would be greater. This is because we are measuring the actual error/theoretical error bound, and those that have a greater percentage, would be more accurate in their prediction. \n"]},{"cell_type":"markdown","metadata":{"id":"rOaW5mcMXLDN"},"source":["### Q6\n","\n","* Copy your code to display the rectangles of the $L_{10}$ approximation of $$\\int_1^6 x^2~dx$$ from Exercise 7 of the pre-lab into a code cell below.\n","* Modify as necessary to use your function instead.\n","* Run the code to show a plot of your function and the 10 rectangles of the approximation."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"m6xqZgcZhQ4H","executionInfo":{"status":"ok","timestamp":1631510857888,"user_tz":240,"elapsed":269,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"b3da19b0-8acd-4c66-db9d-85269d7d382b"},"source":["import matplotlib.pyplot as plt\n","import matplotlib.patches as patches\n","import numpy as np\n","\n","n=10\n","deltax=(6-1)/n\n","xvalues = np.arange(1,6,deltax)\n","def f1(x):\n","  return x**3 - 6*x**2 + 14*x - 6 \n","  \n","ax=plt.axes()\n","\n","for x in xvalues: \n","  rect=patches.Rectangle((x,0), deltax, f1(x))\n","  ax.add_patch(rect)\n","  \n","x = np.arange(1,6,.2)\n","\n","ax.plot(x,f1(x))\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]}]}