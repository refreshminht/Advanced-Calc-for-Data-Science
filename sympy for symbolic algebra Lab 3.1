{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Lab 31.ipynb","provenance":[{"file_id":"1WFtckID6DFbcd1Wt5azR3wWA0kRiRUmm","timestamp":1632492151955},{"file_id":"1pi6wqxjjYp7L0eK7lLhPN4YGMloiSN2-","timestamp":1614307550690},{"file_id":"1BpwiiiI_n0zwyEz1dKeJ58PTxYmHGi14","timestamp":1614265084501},{"file_id":"19FPF8p4Z5GjqWMZ1owustfT-dhm7F10j","timestamp":1573155615796},{"file_id":"1y3I-A6cEi1RXKVv1QXxvHz99xGjVeBSM","timestamp":1572553431127},{"file_id":"1lbqzDauSbUOcfPFgT8AgnPTnrirBenmY","timestamp":1571995149955},{"file_id":"1LR-3zQl_enteF5VT31NEdFX-AlcsCdJQ","timestamp":1571380487289},{"file_id":"1ZWoKeKHl7wthzrrK8Dam2ccE5Ci7zKtC","timestamp":1569535579712},{"file_id":"1zgf0RnmZph9ojxgnD9HhNe0fgNnY-kQp","timestamp":1568758223205},{"file_id":"1Ye2wU70lVeNZ9IzUScokFvczh_4r91Ns","timestamp":1568386546423}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"bHi2H286paFN"},"source":["# Lab 3.1\n","\n","Goals:\n"," \n","* Use `sympy` for symbolic algebra computations.\n","* Convert symbolic expressions to fuctions so they can be graphed.\n","* Write a function to produce Taylor Polynomials\n","\n"]},{"cell_type":"markdown","metadata":{"id":"WEEEmHOILj7_"},"source":["Import the following libraries.\n"]},{"cell_type":"code","metadata":{"id":"mZZqUPjspZGa","executionInfo":{"status":"ok","timestamp":1632493017703,"user_tz":240,"elapsed":113,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}}},"source":["import numpy as np\n","import sympy\n","import matplotlib.pyplot as plt"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qZFQ2v5cqDyA"},"source":["Run this code cell to define the following `sympy` expressions.  It also defines `x` to be a `sympy` symbol."]},{"cell_type":"code","metadata":{"id":"2M5yJGAssss2","executionInfo":{"status":"ok","timestamp":1632493018822,"user_tz":240,"elapsed":111,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}}},"source":["#define a symbolic variable x.  \n","x=sympy.Symbol('x')\n","\n","expr1 = sympy.cos(x**3-2*x)\n","expr2 = sympy.sin(x**3+2*x)\n","expr3 = sympy.sin(2*x**2)+sympy.cos(x)\n","expr4 = (x**3-x)*sympy.cos(x)\n","expr5 = x*sympy.sin(x**3+x)"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z2kVFivQs9cX"},"source":["Pick a different expression than each of your groupmates.  For the rest of this lab, it is referred to as *your function*."]},{"cell_type":"markdown","metadata":{"id":"20-_077YTbRS"},"source":["## Q1\n","\n","Copy/paste your `taylorpolynomial()` function from the prelab.  Then use it to print the degree 10 Taylor polynomial of your function, centered at 0."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZvycnFVtIIt0","executionInfo":{"status":"ok","timestamp":1632493025791,"user_tz":240,"elapsed":622,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"a769c781-4770-48ef-b966-7ce978838803"},"source":["x = sympy.Symbol('x')\n","poly = 0\n","\n","def taylorpoly(f,a,n):\n","  poly = 0\n","  for k in range (0, n+1):\n","    der = sympy.diff(f, x, k)\n","    derval = der.subs(x,a)\n","    fact = sympy.factorial(k)\n","    term = (derval/fact)*(x-a)**k\n","    poly = poly+term\n","    k=k+1\n","  return poly\n","\n","expr2 = sympy.sin(x**3+2*x)\n","\n","print(taylorpoly(expr2, 0, 10))\n"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["2339*x**9/5670 - 113*x**7/315 - 26*x**5/15 - x**3/3 + 2*x\n"]}]},{"cell_type":"markdown","metadata":{"id":"RSTEiQoGTv_o"},"source":["## Q2\n","\n","Using `sympy.lambdify()`, convert your function and its Taylor polynomial to functions that can be applied to `numpy` arrays.  Then plot both of them together on an axis."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"knhEro3TJeve","executionInfo":{"status":"ok","timestamp":1632494141231,"user_tz":240,"elapsed":859,"user":{"displayName":"Minh-Thy Tyler","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiJDZrOUvRv0kSzxQqS_k-JTqRVoPAL-DSD3kP1jQ=s64","userId":"16823885628103027849"}},"outputId":"454368c3-1f0e-4b30-ea80-808cf0625579"},"source":["x = sympy.Symbol('x')\n","expr2 = sympy.sin(x**3+2*x)\n","\n","tay10 = taylorpoly(expr2, 0, 10)\n","f1=sympy.lambdify(x, expr2, 'numpy')\n","f2=sympy.lambdify(x, tay10, 'numpy')\n","x= np.arange(-1,1,.1)\n","\n","y=f1(x)\n","s=f2(x)\n","\n","ax=plt.axes()\n","ax.plot(x,y)\n","ax.plot(x,s)\n","ax.grid()\n","plt.show()"],"execution_count":41,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"s-g_iV-TUKQV"},"source":["## Q3\n","\n","Recall that \n","* An *even* function is symmetric across the $y$-axis. It satisfies $f(x)=f(-x)$ for all $x$.\n","* An *odd* function is symmetric across the origin.  It satisfies $f(x)=-f(-x)$ for all $x$.\n","\n","Some of your group members have even functions and some have odd functions. In a text cell explain how this is reflected in their Taylor polyomials centered at 0. You should specifically reference evidence from their functions.  Give a mathematical explanation for why this pattern should generalize to any even or odd function."]},{"cell_type":"markdown","metadata":{"id":"H4bpBzTXMI2t"},"source":["expr1 = even, expr2= odd, expr3 = even ,expr4 = odd, expr4= even.\n","\n","The taylor polynomial centered at 0 makes it match the actual function's evenness or oddness. If the taylor polynomial is not centered at 0, then it will not represent the original function. These functions are symmetrical, and not centering the taylor polynomial at 0 will not represent this. For example, expr1 is a cos function and expr2 is a sin function which are both symmetrical. In order for the taylor polynomial to approximate these functions it must also be symmetrical and will have to be centered at 0 (because it will not be even or odd if not centered at 0, because it will no longer be that symmetric). \n","The evenenss/odness of the function is represented by the highest degree of the taylor polynomial. For example, for expr2, which is odd (symmetric across the origin), the highest degree of the taylor polynomial is 9 (taylor polynomial: 2339*x**9/5670 - 113*x**7/315 - 26*x**5/15 - x**3/3 + 2*x) and for expr3, which is even (symmetric across the y-axis), the highest degree is 10. This case is applied to all of the functions in our group. For expr1, which is even on the graph, the highest degree of the taylor polynomial is 10. \n","\n","\n"]}]}